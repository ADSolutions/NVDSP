{"name":"NVDSP","body":"## High-performance DSP for audio on iOS and OSX with Novocaine.\r\n\r\nWhile Novocaine allows you to easily read/play audio, it is still quite hard to apply filters to the audio. This (Objective-C++) class will allow you to apply all sorts of filters (high-pass, band-pass, peaking EQ, shelving EQ etc.) in just a few lines of code.\r\n\r\n### Quick introduction/example (highpass filter)\r\n``` objective-c\r\n// ... import Novocaine and audioFilerReader\r\n#import \"NVDSP/NVDSP.h\"\r\n#import \"NVDSP/Filters/NVHighpassFilter.h\"\r\n\r\n// init Novocaine audioManager\r\naudioManager = [Novocaine audioManager];\r\nfloat samplingRate = audioManager.samplingRate;\r\n\r\n// init fileReader which we will later fetch audio from\r\nNSURL *inputFileURL = [[NSBundle mainBundle] URLForResource:@\"Trentemoller-Miss-You\" withExtension:@\"mp3\"];\r\n\r\nfileReader = [[AudioFileReader alloc] \r\n                  initWithAudioFileURL:inputFileURL \r\n                  samplingRate:audioManager.samplingRate\r\n                  numChannels:audioManager.numOutputChannels];\r\n\r\n// setup Highpass filter\r\nNVHighpassFilter *HPF;\r\nHPF = [[NVHighpassFilter alloc] initWithSamplingRate:samplingRate];\r\n\r\nHPF.cornerFrequency = 2000.0f;\r\nHPF.Q = 0.5f;\r\n\r\n// setup audio output block\r\n[fileReader play];\r\n[audioManager setOutputBlock:^(float *outData, UInt32 numFrames, UInt32 numChannels) {\r\n    [fileReader retrieveFreshAudio:outData numFrames:numFrames numChannels:numChannels];\r\n    \r\n    [HPF filterData:outData numFrames:numFrames numChannels:numChannels];\r\n}];\r\n```\r\n\r\n### More examples\r\n#### Peaking EQ filter\r\n``` objective-c\r\nNVPeakingEQFilter *PEF = [[NVPeakingEQFilter alloc] initWithSamplingRate:audioManager.samplingRate];\r\nPEF.centerFrequency = 1000.0f;\r\nPEF.Q = 3.0f;\r\nPEF.G = 20.0f;\r\n[PEF filterData:data numFrames:numFrames numChannels:numChannels];\r\n```\r\n\r\n#### Lowpass filter\r\n``` objective-c\r\n// import Novocaine.h and NVDSP.h\r\n#import \"NVDSP/Filter/NVLowpassFilter.h\"\r\nNVLowpassFilter *LPF = [[NVLowpassFilter alloc] initWithSamplingRate:audioManager.samplingRate];\r\nLPF.cornerFrequency = 800.0f;\r\nLPF.Q = 0.8f;\r\n[LPF filterData:data numFrames:numFrames numChannels:numChannels];\r\n```\r\n\r\n#### Notch filter\r\n``` objective-c\r\n// import Novocaine.h and NVDSP.h\r\n#import \"NVDSP/Filter/NVNotchFilter.h\"\r\nNVNotchFilter *NF = [[NVNotchFilter alloc] initWithSamplingRate:audioManager.samplingRate];\r\nNF.centerFrequency = 3000.0f;\r\nNF.Q = 0.8f;\r\n[NF filterData:data numFrames:numFrames numChannels:numChannels];\r\n```\r\n\r\n#### Bandpass filter\r\nThere are two types of bandpass filters:\r\n\r\n    * 0 dB gain bandpass filter (NVBandpassFilter.h)\r\n    * Peak gain Q bandpass filter (NVBandpassQPeakGainFilter.h)\r\n\r\n``` objective-c\r\n// import Novocaine.h and NVDSP.h\r\n#import \"NVDSP/Filter/NVBandpassFilter.h\"\r\nNVBandpassFilter *BPF = [[NVBandpassFilter alloc] initWithSamplingRate:audioManager.samplingRate];\r\nBPF.centerFrequency = 2500.0f;\r\nBPF.Q = 0.9f;\r\n[BPF filterData:data numFrames:numFrames numChannels:numChannels];\r\n```\r\n\r\n#### Measure dB level (ranging from -51.0f to 0.0f)\r\n``` objective-c\r\n// import Novocaine.h and NVDSP.h\r\n#import \"NVDSP/Utilities/NVSoundLevelMeter.h\"\r\nNVSoundLevelMeter *SLM = [[NVSoundLevelMeter alloc] init];\r\nfloat dB = [SLM getdBLevel:outData numFrames:numFrames numChannels:numChannels];\r\nNSLog(@\"dB level: %f\", dB);\r\n// NSLogging in an output loop will most likely cause hickups/clicky noises, but it does log the dB level!\r\n// To get a proper dB value, you have to call the getdBLevel method a few times (it has memory of previous values)\r\n// You call this inside the input or outputBlock: [audioManager setOutputBlock:^...\r\n```\r\n\r\n#### Applying overall gain. \r\nAll sample values (typically -1.0f .. 1.0f when not clipping) are multiplied by the gain value.\r\n``` objective-c\r\n// import Novocaine.h and NVDSP.h\r\nNVDSP *generalDSP = [[NVDSP alloc] init];\r\n[generalDSP applyGain:outData length:numFrames*numChannels gain:0.8];\r\n```\r\n\r\n### Clipping\r\nMultiple peaking EQs with high gains can cause clipping. Clipping is basically sample data that exceeds the maximum or minimum value of 1.0f or -1.0f respectively. Clipping will cause really loud and dirty noises, like a bad overdrive effect. You can use the method `counterClipping` to prevent clipping (it will reduce the sound level).\r\n\r\n``` objective-c\r\n// import Novocaine.h and NVDSP.h\r\n#import \"NVDSP/Utilities/NVClippingDetection.h\"\r\nNVClippingDetection *CDT = [[NVClippingDetection alloc] init];\r\n// ... possible clipped outData ...//\r\n[CDT counterClipping:outData threshold:0.8f numFrames:numFrames numChannels:numChannels];\r\n// ... outData is now safe ...//\r\n\r\n// or get the amount of clipped samples:\r\n - (float) getClippedSamples:(float *)data threshold:(float)threshold numFrames:(UInt32)numFrames numChannels:(UInt32)numChannels;\r\n// or get the percentage of clipped samples:\r\n - (float) getClippedPercentage:(float*)data numFrames:(UInt32)numFrames numChannels:(UInt32)numChannels;\r\n// or get the maximum value of a clipped sample that was found\r\n - (float) getClippingSample:(float *)data threshold:(float)threshold numFrames:(UInt32)numFrames numChannels:(UInt32)numChannels;\r\n```\r\n\r\n### A thing to note: \r\nThe NVDSP class is written in C++, so the classes that use it will have to be Objective-C++. Change all the files that use NVDSP from MyClass.m to MyClass.mm.\r\n\r\n### Thanks to\r\nAlex Wiltschko - Creator of [Novocaine](http://alexbw.github.com/novocaine/)\r\n\r\nYasoshima - Writer of [this article](http://objective-audio.jp/2008/02/biquad-filter.html), revealing how vDSP_deq22 works. (and google translate, I don't speak Japanese)\r\n\r\nhrnt - Helpful on IRC #iphonedev (freenode)","tagline":"iOS/OSX DSP for audio (Novocaine)","google":"UA-5535798-10","note":"Don't delete this file! It's used internally to help with page regeneration."}